version: '3.8'
services:

  app:
    container_name: app
    image: app:latest
    build:
      context: .
      dockerfile: DockerfileProd
      args:
        DOCKER_BUILDKIT: 1
    restart: "no"
    ports:
      - "8000:8000"
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

      CASSANDRA_HOST: ${CASSANDRA_BROADCAST_IP}
      CASSANDRA_PORT: ${CASSANDRA_PORT}
      CASSANDRA_KEYSPACE_NAME: ${CASSANDRA_KEYSPACE_NAME}
      CASSANDRA_USERNAME: ${CASSANDRA_USERNAME}
      CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}

      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8000/actuator/health || exit 1
      interval: 30s
      timeout: 5s
      start_period: 30s
      retries: 5
    depends_on:
      - postgres
      - cassandra
      - redis
      - minio
      - cm-zookeeper
      - cm-kafka-1
      - cm-kafka-2
      - cm-kafka-3
    networks:
      - postgres-net
      - cassandra-net
      - redis-net
      - minio-net
      - kafka-net
    profiles:
      - exclude-app

  postgres:
    container_name: postgres
    image: postgres:16.3
    restart: "no"
    ports:
      - "5431:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    networks:
      - postgres-net

  cassandra:
    container_name: cassandra
    image: cassandra:5.0
    restart: always
    environment:
      CASSANDRA_CLUSTER_NAME: cluster
      CASSANDRA_DC: ${CASSANDRA_DATACENTER}
      CASSANDRA_RACK: rack1
      CASSANDRA_NUM_TOKENS: 16
      CASSANDRA_START_RPC: true
      CASSANDRA_ENDPOINT_SNITCH: SimpleSnitch
      CASSANDRA_AUTHENTICATOR: PasswordAuthenticator
      CASSANDRA_AUTHORIZER: CassandraAuthorizer
      CASSANDRA_PASSWORD_SEEDER_USERNAME: ${CASSANDRA_USERNAME}
      CASSANDRA_PASSWORD_SEEDER_PASSWORD: ${CASSANDRA_PASSWORD}
      CASSANDRA_USER: ${CASSANDRA_USERNAME}
      CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}
      CASSANDRA_RPC_ADDRESS: 0.0.0.0
      CASSANDRA_BROADCAST_RPC_ADDRESS: ${CASSANDRA_BROADCAST_IP}
      CASSANDRA_LISTEN_ADDRESS: ${CASSANDRA_BROADCAST_IP}
      CASSANDRA_SEEDS: ${CASSANDRA_BROADCAST_IP}
    volumes:
      - ./cassandra.yaml:/etc/cassandra/cassandra.yaml
      - cassandra_data:/var/lib/cassandra
    ports:
      - "9041:9042"
    networks:
      - cassandra-net

  redis:
    container_name: redis
    image: redis:7.0-alpine
    command: [ "sh", "-c", "sed 's|__USERNAME__|$REDIS_USERNAME|g; s|__PASSWORD__|$REDIS_PASSWORD|g' /etc/redis/redis.conf.template > /etc/redis/redis.conf && redis-server /etc/redis/redis.conf" ]
    environment:
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "6378:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf.template:/etc/redis/redis.conf.template
    networks:
      - redis-net

  minio:
    container_name: minio
    image: quay.io/minio/minio:RELEASE.2022-02-18T01-50-10Z
    ports:
      - "9002:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - minio-net

  cm-zookeeper:
    container_name: cm-zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOO_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: yes
    ports:
      - "2181:2181"
    networks:
      - kafka-net

  cm-kafka-1:
    container_name: cm-kafka-1
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: cm-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://cm-kafka-1:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    hostname: cm-kafka-1
    ports:
      - "9092:9092"
    depends_on:
      - cm-zookeeper
    networks:
      - kafka-net

  cm-kafka-2:
    container_name: cm-kafka-2
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: cm-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://cm-kafka-2:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    hostname: cm-kafka-2
    ports:
      - "9093:9092"
    depends_on:
      - cm-zookeeper
    networks:
      - kafka-net

  cm-kafka-3:
    container_name: cm-kafka-3
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: cm-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://cm-kafka-3:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    hostname: cm-kafka-3
    ports:
      - "9094:9092"
    depends_on:
      - cm-zookeeper
    networks:
      - kafka-net

volumes:
  kafka_data:
  postgres_data:
  redis_data:
  cassandra_data:
  minio_data:

networks:
  kafka-net:
    driver: bridge
  postgres-net:
    driver: bridge
  cassandra-net:
    driver: bridge
  redis-net:
    driver: bridge
  minio-net:
    driver: bridge